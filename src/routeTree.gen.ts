/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as protectedProtectedImport } from './routes/(protected)/_protected'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as protectedProtectedHomeImport } from './routes/(protected)/_protected.home'
import { Route as authAuthSignupImport } from './routes/(auth)/_auth.signup'
import { Route as authAuthPasswordrestImport } from './routes/(auth)/_auth.password_rest'
import { Route as authAuthLoginImport } from './routes/(auth)/_auth.login'

// Create Virtual Routes

const protectedImport = createFileRoute('/(protected)')()
const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const protectedRoute = protectedImport.update({
  id: '/(protected)',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const protectedProtectedRoute = protectedProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => protectedRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const protectedProtectedHomeRoute = protectedProtectedHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => protectedProtectedRoute,
} as any)

const authAuthSignupRoute = authAuthSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthPasswordrestRoute = authAuthPasswordrestImport.update({
  id: '/password_rest',
  path: '/password_rest',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthLoginRoute = authAuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/_protected': {
      id: '/(protected)/_protected'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedImport
      parentRoute: typeof protectedRoute
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/password_rest': {
      id: '/(auth)/_auth/password_rest'
      path: '/password_rest'
      fullPath: '/password_rest'
      preLoaderRoute: typeof authAuthPasswordrestImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/signup': {
      id: '/(auth)/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authAuthSignupImport
      parentRoute: typeof authAuthImport
    }
    '/(protected)/_protected/home': {
      id: '/(protected)/_protected/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof protectedProtectedHomeImport
      parentRoute: typeof protectedProtectedImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
  authAuthPasswordrestRoute: typeof authAuthPasswordrestRoute
  authAuthSignupRoute: typeof authAuthSignupRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthPasswordrestRoute: authAuthPasswordrestRoute,
  authAuthSignupRoute: authAuthSignupRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface protectedProtectedRouteChildren {
  protectedProtectedHomeRoute: typeof protectedProtectedHomeRoute
}

const protectedProtectedRouteChildren: protectedProtectedRouteChildren = {
  protectedProtectedHomeRoute: protectedProtectedHomeRoute,
}

const protectedProtectedRouteWithChildren =
  protectedProtectedRoute._addFileChildren(protectedProtectedRouteChildren)

interface protectedRouteChildren {
  protectedProtectedRoute: typeof protectedProtectedRouteWithChildren
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedProtectedRoute: protectedProtectedRouteWithChildren,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof protectedProtectedRouteWithChildren
  '/login': typeof authAuthLoginRoute
  '/password_rest': typeof authAuthPasswordrestRoute
  '/signup': typeof authAuthSignupRoute
  '/home': typeof protectedProtectedHomeRoute
}

export interface FileRoutesByTo {
  '/': typeof protectedProtectedRouteWithChildren
  '/login': typeof authAuthLoginRoute
  '/password_rest': typeof authAuthPasswordrestRoute
  '/signup': typeof authAuthSignupRoute
  '/home': typeof protectedProtectedHomeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(protected)': typeof protectedRouteWithChildren
  '/(protected)/_protected': typeof protectedProtectedRouteWithChildren
  '/(auth)/_auth/login': typeof authAuthLoginRoute
  '/(auth)/_auth/password_rest': typeof authAuthPasswordrestRoute
  '/(auth)/_auth/signup': typeof authAuthSignupRoute
  '/(protected)/_protected/home': typeof protectedProtectedHomeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/password_rest' | '/signup' | '/home'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/password_rest' | '/signup' | '/home'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(protected)'
    | '/(protected)/_protected'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/password_rest'
    | '/(auth)/_auth/signup'
    | '/(protected)/_protected/home'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRoute: typeof authRouteWithChildren
  protectedRoute: typeof protectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRoute: authRouteWithChildren,
  protectedRoute: protectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(protected)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/login",
        "/(auth)/_auth/password_rest",
        "/(auth)/_auth/signup"
      ]
    },
    "/(protected)": {
      "filePath": "(protected)",
      "children": [
        "/(protected)/_protected"
      ]
    },
    "/(protected)/_protected": {
      "filePath": "(protected)/_protected.tsx",
      "parent": "/(protected)",
      "children": [
        "/(protected)/_protected/home"
      ]
    },
    "/(auth)/_auth/login": {
      "filePath": "(auth)/_auth.login.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/password_rest": {
      "filePath": "(auth)/_auth.password_rest.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/signup": {
      "filePath": "(auth)/_auth.signup.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(protected)/_protected/home": {
      "filePath": "(protected)/_protected.home.tsx",
      "parent": "/(protected)/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
